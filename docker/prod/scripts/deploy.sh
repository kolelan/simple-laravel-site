#!/bin/bash

# –°–∫—Ä–∏–ø—Ç –¥–µ–ø–ª–æ—è production –æ–∫—Ä—É–∂–µ–Ω–∏—è
# –í–ù–ò–ú–ê–ù–ò–ï: –î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ç—Ä–µ–±—É–µ—Ç—Å—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ SSL –∏ –¥–æ–º–µ–Ω–∞

set -e

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
COMPOSE_FILE="docker-compose-prod.yml"
DOMAIN="${DOMAIN:-your-domain.com}"
BACKUP_DIR="./backups"

# –§—É–Ω–∫—Ü–∏–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
log_info() {
    echo -e "${GREEN}‚ÑπÔ∏è  $1${NC}"
}

log_warning() {
    echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}"
}

log_error() {
    echo -e "${RED}‚ùå $1${NC}"
}

# –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
check_dependencies() {
    log_info "Checking dependencies..."

    if ! command -v docker &> /dev/null; then
        log_error "Docker is not installed!"
        exit 1
    fi

    if ! command -v docker-compose &> /dev/null; then
        log_error "Docker Compose is not installed!"
        exit 1
    fi
}

# –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤
check_ssl_certificates() {
    log_info "Checking SSL certificates..."

    if [ ! -d "./ssl" ]; then
        log_warning "SSL directory not found. Creating..."
        mkdir -p ssl
    fi

    if [ ! -f "./ssl/cert.pem" ] || [ ! -f "./ssl/key.pem" ]; then
        log_warning "SSL certificates not found in ./ssl/"
        log_warning "Please place your certificates:"
        log_warning "  - ./ssl/cert.pem"
        log_warning "  - ./ssl/key.pem"
        log_warning "Or update nginx config to use HTTP only."
        read -p "Continue without SSL? (y/N): " -n 1 -r
        echo
        if [[ ! $REPLY =~ ^[Yy]$ ]]; then
            exit 1
        fi
    fi
}

# –§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –±—ç–∫–∞–ø–∞
create_backup() {
    log_info "Creating database backup..."

    local timestamp=$(date +%Y%m%d_%H%M%S)
    local backup_path="$BACKUP_DIR/backup_$timestamp"

    mkdir -p "$BACKUP_DIR"
    mkdir -p "$backup_path"

    # –ë—ç–∫–∞–ø PostgreSQL
    if docker ps -q -f name=laravel_postgres_prod > /dev/null; then
        log_info "Backing up PostgreSQL..."
        docker-compose -f $COMPOSE_FILE exec -T postgres pg_dump -U laravel_user laravel_landing_prod > "$backup_path/database.sql" 2>/dev/null || {
            log_warning "Could not create database backup. Continuing..."
        }
    fi

    # –ë—ç–∫–∞–ø Redis (–µ—Å–ª–∏ –Ω—É–∂–µ–Ω)
    if docker ps -q -f name=laravel_redis_prod > /dev/null; then
        log_info "Backing up Redis..."
        docker-compose -f $COMPOSE_FILE exec -T redis redis-cli SAVE > /dev/null 2>&1 || true
        docker cp laravel_redis_prod:/data/dump.rdb "$backup_path/redis_dump.rdb" 2>/dev/null || {
            log_warning "Could not create Redis backup. Continuing..."
        }
    fi

    # –ë—ç–∫–∞–ø storage
    if docker ps -q -f name=laravel_app_prod > /dev/null; then
        log_info "Backing up storage..."
        docker cp laravel_app_prod:/var/www/storage/app "$backup_path/storage" 2>/dev/null || {
            log_warning "Could not create storage backup. Continuing..."
        }
    fi

    # –°–æ–∑–¥–∞–Ω–∏–µ –∞—Ä—Ö–∏–≤–∞ –±—ç–∫–∞–ø–∞
    tar -czf "$backup_path.tar.gz" -C "$BACKUP_DIR" "backup_$timestamp" 2>/dev/null && {
        rm -rf "$backup_path"
        log_info "Backup created: $backup_path.tar.gz"
    } || {
        log_warning "Could not create backup archive"
    }
}

# –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–∫—Ä—É–∂–µ–Ω–∏—è
check_environment() {
    log_info "Checking environment configuration..."

    if [ ! -f ".env" ]; then
        log_error ".env file not found!"
        log_info "Please create .env file from .env.example and configure production values."
        exit 1
    fi

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
    if grep -q "APP_KEY=base64:" .env 2>/dev/null; then
        log_info "App key found ‚úì"
    else
        log_error "App key not set! Run: php artisan key:generate"
        exit 1
    fi

    if grep -q "APP_ENV=production" .env; then
        log_info "App environment: production ‚úì"
    else
        log_warning "APP_ENV is not set to production"
    fi

    if grep -q "APP_DEBUG=false" .env; then
        log_info "Debug mode: disabled ‚úì"
    else
        log_warning "APP_DEBUG is not set to false"
    fi
}

# –§—É–Ω–∫—Ü–∏—è –¥–µ–ø–ª–æ—è
deploy_application() {
    log_info "Starting deployment..."

    # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–µ–∫—É—â–∏—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
    log_info "Stopping existing containers..."
    docker-compose -f $COMPOSE_FILE down

    # –ü—É–ª–ª –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –æ–±—Ä–∞–∑–æ–≤ (–µ—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è)
    log_info "Pulling latest images..."
    docker-compose -f $COMPOSE_FILE pull --ignore-pull-failures

    # –ë–∏–ª–¥ –∏ –∑–∞–ø—É—Å–∫ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
    log_info "Building and starting containers..."
    docker-compose -f $COMPOSE_FILE up -d --build

    # –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤
    log_info "Waiting for services to start..."
    sleep 30

    # –ó–∞–ø—É—Å–∫ –º–∏–≥—Ä–∞—Ü–∏–π
    log_info "Running database migrations..."
    docker-compose -f $COMPOSE_FILE exec -T app php artisan migrate --force

    # –û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞
    log_info "Optimizing application..."
    docker-compose -f $COMPOSE_FILE exec -T app php artisan config:cache
    docker-compose -f $COMPOSE_FILE exec -T app php artisan route:cache
    docker-compose -f $COMPOSE_FILE exec -T app php artisan view:cache

    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–∞–≤
    log_info "Setting permissions..."
    docker-compose -f $COMPOSE_FILE exec -T app chown -R www-data:www-data /var/www/storage
    docker-compose -f $COMPOSE_FILE exec -T app chmod -R 775 /var/www/storage
}

# –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è
health_check() {
    log_info "Performing health check..."

    local max_attempts=30
    local attempt=1

    while [ $attempt -le $max_attempts ]; do
        if curl -f -s http://localhost > /dev/null 2>&1 || curl -f -s https://localhost > /dev/null 2>&1; then
            log_info "‚úÖ Application is healthy and responding"
            return 0
        fi

        log_info "‚è≥ Waiting for application to start... (attempt $attempt/$max_attempts)"
        sleep 10
        ((attempt++))
    done

    log_error "Application health check failed!"
    return 1
}

# –§—É–Ω–∫—Ü–∏—è –æ—á–∏—Å—Ç–∫–∏ —Å—Ç–∞—Ä—ã—Ö –æ–±—Ä–∞–∑–æ–≤
cleanup_old_images() {
    log_info "Cleaning up old Docker images..."
    docker image prune -f
}

# –§—É–Ω–∫—Ü–∏—è –ø–æ–∫–∞–∑–∞ —Å—Ç–∞—Ç—É—Å–∞
show_status() {
    log_info "Deployment completed!"
    echo
    echo "üìä Deployment Status:"
    echo "===================="
    docker-compose -f $COMPOSE_FILE ps
    echo
    echo "üìù Logs can be viewed with:"
    echo "   docker-compose -f $COMPOSE_FILE logs -f"
    echo
    echo "üåê Application should be available at:"
    echo "   https://$DOMAIN (or http if SSL not configured)"
}

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
main() {
    echo "=========================================="
    echo "üöÄ PARALLAX LANDING - PRODUCTION DEPLOY"
    echo "=========================================="
    echo

    check_dependencies
    check_environment
    check_ssl_certificates

    log_warning "This will deploy to PRODUCTION environment!"
    read -p "Are you sure you want to continue? (y/N): " -n 1 -r
    echo
    if [[ ! $REPLY =~ ^[Yy]$ ]]; then
        log_info "Deployment cancelled."
        exit 0
    fi

    # –°–æ–∑–¥–∞–Ω–∏–µ –±—ç–∫–∞–ø–∞
    create_backup

    # –î–µ–ø–ª–æ–π
    deploy_application

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è
    health_check

    # –û—á–∏—Å—Ç–∫–∞
    cleanup_old_images

    # –°—Ç–∞—Ç—É—Å
    show_status
}

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
trap 'log_error "Deployment failed!"; exit 1' ERR

# –ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
main "$@"